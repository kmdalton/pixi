#!/usr/bin/env python

import argparse
from xparm import xparm
from xdsinp import xdsinp,nxdsinp



def main():
    parser = argparse.ArgumentParser(description="Integrate pump probe X-FEL data using nXDS (http://nxds.mpimf-heidelberg.mpg.de/). PIXI accepts sets of images acquired with crystals in the same position and integrates them on a per image basis using the same reflection profiles and geometric parameters for equivalent images.")
    parser.add_argument("refimage1", type=str, help="PIXI will integrate an arbitrary number of datasets with parameters learned from the first dataset. Specify the first image in each dataset. Images must be enumerated with fixed width, zero padded integers __immediately__ prior to the file extension (/path/to/image/prefix00001.cbf).")
    parser.add_argument("otherimage1", type=str, nargs='+', help="PIXI will integrate an arbitrary number of datasets with parameters learned from the first dataset. Specify the first image in each dataset. Images must be enumerated with fixed width, zero padded integers __immediately__ prior to the file extension (/path/to/image/prefix00001.cbf).")
    parser.add_argument("--xdsin", type=str, help="XDS.INP file with default parameters to use during integration. Some parameters are overridden during the process, including but not limitted to those relating to spot profiling and parameter refinement. ", default=nxdsinp())
    args = parser.parse_args()

"""
    call(['generate_XDS.INP', '"{}"'.format(args.path)])
    xdsinp = xdsdotinp()
    if args.xdsin is not None:
        overrides = xdsdotinp(args.xdsin)
        xdsinp.update(overrides)
    xdsinp.write()
    call(['xds_par'])




  #Backup input file
  call(["cp", "nXDS.INP", "nXDS.INP_backup"])
  call(["cp", "XPARM.nXDS", "XPARM.nXDS_backup"])
  lines = open("nXDS.INP", "r").readlines()
  with open("nXDS.INP_backup", "w") as bup, open("nXDS.INP", "w") as out:
    for line in lines:
      if line[0] != "!" and "JOB" in line.split("=")[0]:
        out.write(" JOB= INTEGRATE \n")
        bup.write(line)
      else:
        out.write(line)
        bup.write(line)
  x = xparm(inFN)
  x.align_parms()
  header = x.header
  header[1] = "         1" + header[1][10:]
  for k,v in x.items():
    print k,v
    with open("XPARM.nXDS", "w") as out, open("LISTIM", "w") as listim:
      out.writelines(header)
      out.writelines(v.lines)
      listim.write(k)
    call(["nxds_par"])
    with open("INTEGRATE.HKL", "r") as hkl, open("OUT.HKL", "a") as out:
      out.write(k + "\n")
      out.writelines([i for i in hkl if i[0] != "!"])
      out.close()
"""

if __name__=="__main__":
  main()


