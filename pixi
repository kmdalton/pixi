#!/usr/bin/env python
# -*- coding: utf-8 -*


"""
                ########################################
                #                                      #
                # PIXI -- Paired Image XFEL Integrator #
                #                                      #
                ########################################


Integrate pump probe X-FEL data using nXDS (http://nxds.mpimf-heidelberg.mpg.de/).
PIXI accepts sets of images acquired with crystals in the same position and integrates 
them on a per image basis using the same reflection profiles and geometric parameters 
for equivalent images."
"""

import xds,re,argparse
from subprocess import call




def main():
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("image1", type=str, nargs='+', help="PIXI will integrate an arbitrary number of datasets with parameters learned from the first dataset. Specify the first image in each dataset. Images must be enumerated with fixed width, zero padded integers __immediately__ prior to the file extension (/path/to/image/prefix00001.cbf).")
    parser.add_argument("--xdsin", type=str, help="XDS.INP file with default parameters to use during integration. Some parameters are overridden during the process, including but not limitted to those relating to spot profiling and parameter refinement. ", default=None)
    parser.add_argument("--spacegroup", type=int, help="Provide the space group number for indexing.", default=None)
    parser.add_argument("--cell", type=float, nargs=6, help="Provide the space group number for indexing.", default=None)
    parser.add_argument("--highres", type=float, nargs=1, help="High resolution cutoff for integration. Default is zero Ångströms.", default=0.)
    parser.add_argument("--lowres", type=float, nargs=1, help="Low resolution cutoff for integration. Default is 20 Ångströms.", default=20.)
    parser.add_argument("--generate", action="store_true", help="Use the generate_XDS.INP to try to guess some sane nXDS.INP parameters.")
    parser.add_argument("output", help="Specify the output filename for uncorrected HKL file.")
    args = parser.parse_args()
    outFN = args.output

    datasets = [xds.dataset(i) for i in args.image1]

    if args.generate:
        xdsinp = datasets[0].generate_nxdsin()
    else:
        xdsinp = xds.nxdsinp()

    if args.xdsin is not None:
        overrides = xds.nxdsinp(args.xdsin)
        xdsinp.update(overrides)

    if args.spacegroup is not None:
        xdsinp["SPACE_GROUP_NUMBER="]= "{:d}".format(args.spacegroup)

    if args.cell is not None:
        xdsinp["UNIT_CELL_CONSTANTS="]= ' '.join(map("{:0.2f}".format, args.cell))
    
    xdsinp["INCLUDE_RESOLUTION_RANGE="]= "{:0.1f} {:0.1f}".format(args.lowres, args.highres)

    """
    -------------------------------------
    | phase one: index reference data   |
    -------------------------------------
    """

    with open('LISTIM', 'w') as out:
        out.write('\n'.join([i.filename for i in datasets[0]]))
    xdsinp['JOB='] = " XYCORR INIT COLSPOT POWDER IDXREF"
    xdsinp['IMAGE_LIST='] = "LISTIM"
    xdsinp['IMAGE_DIRECTORY='] = datasets[0].dirname

    xdsinp.write()
    call(['nxds_par'])

    """
    -------------------------------------
    | phase two: align A matrices       |
    -------------------------------------
    """

    xparms = xds.xparm("XPARM.nXDS")
    xparms.align_parms()
    xparms.write("XPARM.nXDS")

    
    """
    -------------------------------------
    | phase three: integrate ref data   |
    -------------------------------------
    """

    xdsinp['JOB='] = " INTEGRATE"
    xdsinp.write()
    call(['nxds_par'])

    """
    -------------------------------------
    | phase four: integrate datasets    |
    -------------------------------------
    """

    #TODO: more transparent naming conventions in this block:
    hkl = xds.uncorrectedhkl("INTEGRATE.HKL")
    xdsinp['JOB='] = " INTEGRATE"
    for i,imagedatum in hkl.imagedata.iterrows():
        index = int(re.search(r"[0-9]+\..*?$", imagedatum['file_name']).group().split('.')[0])
        xdsinp['BEAM_DIVERGENCE='] = imagedatum.beam_divergence
        xdsinp['BEAM_DIVERGENCE_E.S.D.=']  = "{} {}".format(imagedatum.sigma1, imagedatum.sigma2)
        xdsinp['REFLECTING_RANGE_E.S.D.='] = "{} {}".format(imagedatum.reflecting_range_esd_1, imagedatum.reflecting_range_esd_2)
        for dataset in datasets:
            for image in dataset:
                if image.index == index:
                    with open("LISTIM", "w") as out:
                        out.write(image.filename)
                    xparms.directory = dataset.dirname
                    xparms[image.filename] = xparms[imagedatum['file_name']]
                    xparms.write("XPARM.nXDS", image.filename)
                    f = open("INTEGRATE.HKL", "w")
                    f.close()
                    xdsinp['IMAGE_DIRECTORY='] = dataset.dirname
                    xdsinp.write('nXDS.INP')
                    call(['nxds_par'])
                    with open(outFN, 'a') as out, open('INTEGRATE.HKL', 'r') as f:
                        out.write("{}{}\n".format(dataset.dirname, image.filename))
                        out.write(f.read())

if __name__=="__main__":
  main()


